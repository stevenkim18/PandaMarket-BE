// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma" // 6.6에서는 권장 사항 7에서는 필수 예정
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  nickname    String        @unique
  password    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Product     Product[]
  ProductLike ProductLike[]
  Board       Board[]
  BoardLike   BoardLike[]
  Comment     Comment[]
}

model Product {
  id          String        @id @default(uuid())
  name        String
  price       Int
  description String
  imageUrls   String[]
  tags        String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  ProductLike ProductLike[]
}

model ProductLike {
  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}

model Board {
  id        String      @id @default(uuid())
  title     String
  content   String
  imageUrls String[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  BoardLike BoardLike[]
  Comment   Comment[]
}

model BoardLike {
  userId  String
  boardId String
  user    User   @relation(fields: [userId], references: [id])
  board   Board  @relation(fields: [boardId], references: [id])

  @@id([userId, boardId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
}
